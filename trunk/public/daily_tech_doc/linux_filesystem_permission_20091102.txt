Linux文件权限详解

1. 为三种不同类型的用户来分别设置权限
   <1> 文件的所有者  (创建文件的用户)
   <2> 文件的所有者所在的组  (创建文件用户所在的组)
   <3> 其他用户
   
2. 三种访问程度:
   读
   写
   执行

3. 一个权限的实际例子分析:
例如:
(使用ls -l)
-rwxrwx--- 1 root plugdev 18M 2007-02-28 18:05 ActionCube_v0.92.tar.bz2
-rwxrwx--- 1 root plugdev 60M 2007-04-30 22:52 nexuiz-223.zip
-rwxrwx--- 1 root plugdev 7.4M 2007-04-25 02:16 stardict-oxford-gb-2.4.2.tar.bz2
-rwxrwx--- 1 root plugdev 102M 2007-05-01 18:22 tremulous-1.1.0-installer.x86.run
-rwxrwx--- 1 root plugdev 4.9M 2007-04-30 14:32 wqy-bitmapfont-0.8.1-7_all.deb.bin

<1>第一个字符用来区分文件或者目录:
d:    表示一个目录
-:    表示是一个普通文件
l:    表示是一个符号链接文件, 实质上指向另外一个文件
b, c: 表示一些外部的借口设备文件

<2> 2~10个字符分为三组，分别表示文件所有者，文件所有者所在的组，和其他用户的权限.
rwxrwx---表示对文件所有者，文件所有者所在的组是可以读/写/执行的，其它用户没有任何权限

<3>
r: 对应的数值是4
w: 对应的数值是2
x: 对应的数值是1
-: 对应的数值是0
我们可以把rwx看作二进制, 例如rwx可以看作111, 而r-x看作101.
所以: rwxr-xr-x <=> 111 101 101 也就是755

4. 修改文件的权限
如果我们要设置一个文件的权限为 rwxr-x---,
可以使用chmod 750 a.txt
chmod 777 /home/user    仅把目录设置成777
chomd -R 777 /home/user 把目录和所有的子文件设置成777 (递归)

5. 改变文件的所有者/组
修改文件所有者: chown NewUser a.txt
修改文件的组:   chown :NewGroun a.txt

6. 目录的X权限(执行)
当这个权限用在目录的时候，表示搜索权限，
例如你要访问/etc/httpd.conf的时候，你必须拥有/etc的x权限，否则
即使你对目录拥有读取权限，也无法访问httpd.conf这个文件.

7. 补充几个文件爱你的特殊权限:
UID   - 4
GID   - 2
stick - 1
<1> SET UID
当一个程序一旦设置了该标记以后,运行该程序的进程将拥有该"程序所有
者"同样的权限.

比如你的某个程序是由root所有,又设置了SetUid位,那即便是一个普通用户运行这个程序,
但该程序的身份一样是超级用户的身份了,可以访问所有只能由root用户访问的资源.
chmod 4755 your_program

<2> SET GID
与setUid类似,使得使用者在执行该文件时,都绑定了文件所有组的权限
chmod 2755 your_program

也可以同时设置UID和GID
chmod 6755 your_program

<3> 粘着位sticky
即当一个目录被设置为"粘着位",则该目录下的文件只能由 
  超级管理员删除
  该目录的所有者删除
  该文件的所有者删除
也就是说,即便该目录是任何人都可以写,但也只有文件的属主才可以删除文件
/tmp就是这种设置的典型应用.
chmod 1777 your_folder