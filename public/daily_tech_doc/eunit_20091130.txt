介绍Erlang的单元测试框架eunit的内容


1. 目前eunit已经成为Erlang OTP的一部分, 安装Erlang后会在lib目录下看得到.

2. 在使用eunit的时候，需要为测试的Module添加eunit.hrl, 添加之后使你的Module具有了下面的特性:
我的路径是: /usr/local/lib/erlang/lib/eunit-2.1.2/include/eunit.hrl
a. 自动将以_test结尾的函数作为测试函数
b. 为你的module添加并到处test/0函数
c. 为你提供丰富的test macro

3. 一个最基本的例子: 使用xxx_test
#math.erl

-module(math).
-include_lib("/usr/local/lib/erlang/lib/eunit-2.1.2/include/eunit.hrl").

-export([add/2]).

add(X, Y) ->
    X + Y.

%% 测试函数, 一个最基本的测试单元.
add_test() ->
    ?assert(add(2,3) =:= 5).

测试:
math:test().      %% 会执行add_test/0
  Test passed.
ok

4. 例子2，使用xxx_test_, 这种函数在eunit中称为test generation function,
也就是测试生成函数，返回一个函数或者函数list, eunit会依次执行每个函数,
有三种方式来返回函数:
a. 使用传统的fun定义, fun() -> ?assert(add(3, 4) =:= 7) end
b. 使用宏?_test来代替fun, ?_test(?assert(add(3, 4) =:= 7))
c. 使用宏?_assert来简化, ?_assert(add(3, 4) =:= 7) (注意和宏assert区别)
#math.erl

-module(math).
-include_lib("/usr/local/lib/erlang/lib/eunit-2.1.2/include/eunit.hrl").

-export([add/2]).

add(X, Y) ->
    X + Y.

add1_test_() ->
    fun() -> ?assert(add(2,3) =:= 5) end.  %% 返回一个函数

add2_test_() ->
    ?_test( ?assert(add(3, 4) =:= 7) ).    %% 使用宏_test, 返回一个函数

add3_test_() ->
    ?_assert(add(5, 6) =:= 11).    %%使用宏_assert，返回一个函数

add4_test_() ->
    [?_assert(add(2, 3) =:= 5),    %% 返回函数list
     ?_assert(add(3, 4) =:= 7),
     ?_assert(add(5, 6) =:= 11)].

测试:
math:test().
  All 6 tests passed.
ok

5. 如何运行多个测试模块?
我们上4中的math.erl复制两份，分别为math1.erl和math2.erl, 我们再增加一个run_test.erl模块用来组合所有Module
的测试.

run_test.erl
-module(run_test).
-include_lib("/usr/local/lib/erlang/lib/eunit-2.1.2/include/eunit.hrl").

all_test_() ->           %% 会执行所有Module中的test/0.
    [{module, math1},
     {module, math2}]. 

测试:
run_test:test().
  All 12 tests passed.
ok

