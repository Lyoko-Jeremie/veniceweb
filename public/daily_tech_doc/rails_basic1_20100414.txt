
1. Rails的设计思路是: 约定优于配置

2. 在Ruby中任何事物都是类, 例如-166也是类, 我们要取它的绝对值, 可以这样写:
   c = -166.abs

3. ruby的迭代器interator
   在ruby中一切都是对象, 数字本身就是对象, 数字本身有自己的interator, times
   6.times{|i| print i} # 0123456
   
   我们看看它的实现:
   每个函数不光可以带参数, 还可以带代码块, 代码块在ruby中用{}或者do end包围,
   如果是单行的用{}, 多行的用do end.
   代码块和参数是接替运行的, 如果在函数内部运行中遇到了yield, 它就会把函数的执行过程
   交割附带的代码块执行, 代码块执行完了, 执行流程转到函数内部继续运行.
   yield还可以带参数, 如yield a b c, 代码块可以接受yield传来的参数.

   例子1:
   def callBlock
     yield
     yield
   end
   # 调用方式
   callBlock{puts "this is test string"}

   例子2:
   def callBlock(data)
     yield data, data*2 # 带参数的yield
     yield data, data*2 # 带参数的yield
   end
   # 调用方式
   callBlock(23){|m, n| print m, n}

   例子3: (使用do .. end来代替{}表示代码块)
   def callBlock
     for num in 1..3
       yield(num)    # 带参数的yield
     end
   end
   # 调用方式
   callBlock do |i|
     puts "this is block#{i}."
   end

4. "创建"和"启动"一个rails程序
   rails railsdemo
   cd railsdemo
   ruby script/server   # 启动WEBrick服务器
   访问http://127.0.0.1:3000

5. WEBrick的简单介绍:
   Ruby默认包含了丰富的软件, WEBrick http服务器就是其中之一,
   这个程序包被用作rubygem的默认文档服务器, 是一个非常简单的纯ruby写的服务器,
   我们可以用几行ruby代码来运行一个web服务器.

   httpserver.rb
   require "webrick"
   httpd = WEBrick::HTTPServer.new(
     :DocumentRoot => Dir::pwd + "/ruby",  # 根目录
     :Port => 3000                         # 端口
   )
   trap(:INT) {httpd.shutdown}
   httpd.start
   #启动服务器, 它将当前目录下的/ruby作为应用服务器的根目录
   ruby httpserver.rb
   http://127.0.0.1:3000

6. rails开发的主要工作都集中在编辑apps目录下的内容:
   controllers, models, views, helpers
   controllers - 存放controller类, 处理来自用户的web请求
   views       - 存放相应的模板文件, 模板文件填充数据后, 转换为html传送给用户浏览器
   models      - 存放数据模型类, 封装了数据库中的数据.
   helpers     - 存放了一些帮助类

7. 如何添加新的Controller类
   在rails生成的skeleton框架中包含了一个scripts目录, 里面有很多脚本, 帮助我们简化工作.
   ruby scripts/generate controller MyTest
   rails作了一些默认的假设:
   MyTest对应的controller文件是: app/controllers/my_test_controller.rb
   文件中控制器类的名称是: MyTestController
   URL映射是: My_Test

   修改: my_test_controller.rb
   class MyTestController < ApplicationController
     def index      # URL映射: my_test
       render:text => "hello world"
     end

     def hello      # URL映射: my_test/hello
       render:text => "this is hello"
     end
   end
 
8. 配置MySQL数据库
rails使用yaml作为配置文件, config/database.yml是数据库的配置文件
<1> 补充一点yaml的知识:
    如何将ruby对象保存到yaml?
    ruby程序如何读取yaml文件?

    写入:
    require "yaml"
    tree = {:name => 'ruby',
            :uses => ['script', 'web', 'testing'],
            :key1 => 'val1'}
    File.open("tree.yaml", "w") {|f| YAML.dump(tree, f)}
    生成的tree.yaml文件内容:
    --- 
    :key1: val1
    :name: ruby
    :uses: 
    - script
    - web
    - testing
    读取:
    require "yaml"
    tree = YAML.load(File.open("tree.yaml"))
    puts tree[:uses][1]  # 输出web

    yaml的一个优势就是非常适合阅读:
    看下面的yaml文件:
    hosts: 127.0.0.1
    people:
      name: liqiang
      city: shanghai
    可以这样使用:
    require "yaml"
    tree = YAML.load(File.open("tree.yaml"))
    puts tree["hosts"]
    puts tree["people"]["name"]

<2> rails默认使用sqlite3作为数据库, 在我们使用rails railsdemo的时候,
    使用的数据库是sqlite3, yaml配置如下:
    development:
      adapter: sqlite3
      database: db/development.sqlite3
      pool: 5
      timeout: 5000
    我们要使用mysql, 可以这样修改(development, test, production):
    development:
      adapter: mysql
      encoding: utf8
      reconnect: false
      database: railsdemo_db
      pool: 5
      username: root
      password: xxxxx
      socket: /var/run/mysqld/mysqld.sock

    或者rails -d mysql railsdemo (这样创建的项目默认使用mysql数据库)

    问题:
    a. 如果遇到错误:
    WARN TCPServer Error: Address already in use - bind(2) Exiting
    可以换个端口尝试看看: ruby script/server -e production -p 3001
    b. 如果遇到:
    !!! The bundled mysql.rb driver has been removed from Rails 2.2.
    Please install the mysql gem and try again: gem install mysql.
    sudo gem install mysql 
    c. 安装sudo gem install mysql遇到下面问题
    Building native extensions.  This could take a while...
    ERROR:  Error installing mysql:
	ERROR: Failed to build gem native extension.
    应该先安装libmysqlclient15-dev这个包
    sudo apt-get install libmysqlclient15-dev
    
9. 正式开始我们的项目:
<1> 创建railsdemo_db数据库和books表
    create database railsdemo_db
    create table books (
      id int(11),
      title varchar(100),
      des text,
      buydate date,
      primary key(id)
    );

<2> 生成model
    ruby script/generate model book
    rails生成的Model类Book保存在app/models/book.rb
    rails将数据库中的books表映射到Book类.
    一个新的约定, 数据库用复数形式命名, model用单数.
    rails可以理解英文的复数归则, person类和people表格联系.

<3> 生成一个新的controller
    ruby script/generate controller book
    填写一行代码:
    class BookController < ApplicationController
      scaffold :book
    end
    运行之前需要安装两个插件:
    ruby script/plugin install scaffolding
    ruby script/plugin install http://redmine.rubyforge.org/svn/trunk/vendor/plugins/classic_pagination/ 
    下载的plugin会出现在 railsdemo/vendor/plugins/
                                              /scaffolding
                                              /classic_pagination
    scaffold :book一句話生成了数据库表对应的CRUD操作, 而且生成了
    对应的视图模板文件.
    测试:
    book/new
    book/list
    book/show
    book/edit
    book/delete

10.





   
   

