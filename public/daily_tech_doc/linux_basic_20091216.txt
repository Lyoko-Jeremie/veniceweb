介绍Linux系统的基础知识


1. cat 链接并显示文件
该命令在屏幕上显示一个或者多个文件的所有内容，所以对于那些超过一页的文件的内容，
该命令只能显示最后一页.

<1> cat myfile 会显示文件myfile的所有内容
<2> cat myfile1 myfile2 会显示myfile1和myfile2的内容
<3> cat -n myfile 会显示文件myfile的所有内容，加行号
<4> cat > newfile  (如果myfile已经存在，覆盖已有的内容)
会把标准输入的内容输入到newfile中. <Ctrl - D>结束标准输入.
<5> cat 不带参数执行的时候，会从标准输入读取内容，每次一行，从标准输入中显示出来.
<6> cat file1 file2 > file3    合并文件: 将file1和file2的内容合并到file3, 如果file3不存在，则创建新文件
<7> cat file1 file2 >> file3   追加文件: 将file1和file2的内容追加到file3末尾, 如果file3不存在，则创建新文件
<8> cat >> file3 从标准输入追加内容到file3


2. more/head/tail 浏览或者翻阅文本文件
一次要查看多页的内容, 可以翻页
(也可以使用head tail来查看文件的头部或者尾部)
<1> more myfile 显示文件myfile的内容
<2> more -10 myfile 显示文件myfile的内容, 没屏幕显示10行<Space>翻页, <Q>退出
<3> head myfile
<4> tail myfile

3. cp 拷贝文件
<1> cp file1 file2 拷贝file1到file2
<2> cp -i file1 file2 如果目标存在，覆盖前提示用户
<3> cp -r fold1 fold2 递归的拷贝文件夹(需要-r参数)

4. mv 移动文件
<1> mv file1 file2 移动file1到file2
<2> mv -i file1 file2 如果目标存在，覆盖前提示用户
<3> mv fold1 fold2 移动文件夹(和移动文件一样, 不需要-r参数)

5. rm 删除文件
<1> rm file 删除file
<2> rm -i file 删除前提示用户
<3> rm -r fold 递归的删除fold的所有内容，包括子目录和文件

6. ls 显示文件信息
ls [Options] [pathname]
ls 如果pathname不写，则显示当前目录的所有文件
ls ~ 显示当前用户的$HOME目录下的文件
ls ~user1 显示user1用户的$HOME目录下的文件
<1> ls 显示文件
<2> ls -a 显示所有文件，包含隐藏文件
<3> ls -i 显示文件，包括inode
<4> ls -l 显示文件的详细信息
<5> ls -F 在目录名后面显示/, 在二进制后面显示*, 在符号链接后面显示@

7. mkdir 一个或者多个目录
<1> mkdir dir1 创建目录dir1
<2> mkdir dir1 dir2 创建目录dir1, dir2
<3> mkdir -m 700 dir1 创建目录dir1，并指定权限700 
<4> mkdir -p(小写) dir1/dir2 可以创建父目录, 会创建dir1和dir1的子目录dir2

8. rmdir 删除一个目录(可以用rm -r dir代替)
<1> rmdir dir1  删除dir1(dir1必须是空目录)
    (效果等同于 rm -r dir1)
<2> rmdir dir1/dir2    删除dir2, 保留dir1
<3> rmdir -p dir1/dir2 同时删除dir2和dir1

9. man 查看命令信息
<1> man ls 查看ls命令的信息. 和more一样，<Space>翻页, <Q>退出
<2> man -k login 根据关键字login进行搜索
<3> man -s2 login 指定搜索的Linux手册的章节

10. whereis 沿着特定的路径搜索二进制，源文件，和用户手册的位置
<1> whereis sh 搜索sh的二进制，源文件，和用户手册
<2> whereis -b sh 只搜索二进制
<3> whereis -m sh 只搜索用户手册
<4> whereis -s sh 只搜索源文件

11. whoami 查看当前登录用户

12. cal 查看当前日期

13. alias 设置别名
<1> alias 查看当前所有的别名
<2> alias dir='ls -al'  (dir /tmp等于ls -al /tmp)
    alias gohome='cd /home/username'
<3> unalias dir 删除dir别名
<4> unalias 删除所有别名

14. file 查看文件类型
<1> file pic2 查看pic2的类型

15. Shell元字符
* 多个字符的匹配符
[a-zA-Z0-9] 一个字符
? 一个字符

16. 介绍Linux中文件的表示和存储:
a. 磁盘存储
磁道(track): 一个计算机系统有多个磁盘驱动器，一个磁盘驱动器具有上下两个盘片组成，每个盘片逻辑的划分成一些同心圆，这些同心圆叫做磁道.
柱面: 两个盘面上位置相同的磁道组成的柱面
扇区(sector): 每个磁道分成大小固定的部分，叫做扇区.

所以扇区的寻址方式是四维地址，实际应用中转换成线性的块号来访问.
<磁盘#, 柱面#, 磁道#, 扇区#>

b. 索引节点
每个文件具有一些列的属性，文件名，所有者，在磁盘上的存储位置等等，这些属性存储在磁盘上叫做“索引节点”的区域，
当文件被打开的时候，索引节点会被复制到内存中，加快访问。
所以每个文件都有文件名和索引节点号来表示<inode#,filename>

c. 文件如何访问(理解索引节点inode和文件描述符file descriptor)?
索引节点中保存了文件在磁盘上的存储位置，所以通过索引节点号找到索引节点，然后通过存在在索引节点中的文件在磁盘的位置来访问.

d. Linux为每个执行的命令都打开三个文件: stdin, stdout, stderr, "文件描述符"分别是0, 1, 2 

e. Linux中每个打开的文件都有一个文件描述符(file descriptor), 是一个小整数，每个进程都有一个对应的文件描述表，里面包含了该进程的
   文件描述符的所有信息，通过这个文件描述符表，可以定位到系统范围内的文件表，其中包含了指向索引节点的指针，可以通过索引节点来进一步访问文件的内容.

   [每个进程对应的文件描述符表] -> [系统范围的文件表] -> [系统范围的索引节点列表] -> {找到一个特定的索引节点，访问文件}

17. 文件结束的标志:
每个Linux文件都有一个文件结束的标志, eof, 当输入是键盘时候，结束标志是<Ctrl - D>

18. 如何添加一个用户到Linux, 已经密码设置等问题:
<1> 添加一个用户到系统(需要root权限)
    useradd -d /home/user1 user1  (新增用户)
    passwd user1                  (设置密码)
    
<2> 查看1#中新增的用户的一些属性: 
    (新增用户的标示号是501, 新增用户的组标示号是501)
    /etc/passwd
    /etc/shadow
    /etc/group

    a. vi /etc/passwd(使用:分隔)
    root:x:0:0:root:/root:/bin/bash
    ...
    user1:x:501:501:user1:/home/user1:/bin/bash

    注册名:口令:用户标识号:组标识号:用户名:用户主目录:命令解释程序
    口令: 口令不再直接保存在passwd文件中，通常将passwd文件中的口令字段使用一个“x”来代替，将/etc/shadow作为真正的口令文件，
          如果passwd字段中的第一个字符是“*”的话，那么，就表示该账号被查封了，系统不允许持有该账号的用户登录.

    b. vi /etc/shadow(使用:分隔)
    root:$1$ZodQOm7y$orHTJc0cZ8xezSKp6qwUB/:14551:0:99999:7:::
    ...
    user1:$1$o2lVGRCW$xENueH2aqDKzWvKk03o3I/:14599:0:99999:7:::

    帐号名称:密码:上次修改密码的日期:密码不可被变更的天数:密码需要被重新变更的天数:密码变更前提前几天警告:帐号失效日期:帐号取消日期:保留条目，目前没用
    密码: 这里是加密过的
    密码需要被重新变更的天数: 99999表示不需要变更

    c. vi /etc/group
    root:x:0:root
    ...
    user1:x:501:
    
    组名:加密密码:组ID:所有属于该组的用户列表
    如果用户列表为空，表明成员列表在/etc/passwd文件中指定了

<3> 创建用户的时候指定组(user2属于组user1):
    useradd -d /home/user2 -g user1 user2
    vi /etc/passwd
    user2:x:502:501::/home/user2:/bin/bash  (user2属于组user1#501)

    使用groups查看user2所在的组:
    groups user2
    user2 : user1

19. Linux文件权限包括:
    a. 文件的权限
    User, Group, Others -> u, g, o
    读, 写, 执行        -> r, w, x 
    取值范围是000-777
    
    新建一个文件file1, 查看它的访问权限(-标示0)
    ls -l file1
    -rw-r--r-- 1 root root 23 12-21 12:42 file1
    文件类型和权限 链接数 文件所有者 文件所有者所在的组 文件大小(byte) 日期 事件 文件名
    文件类型: - 标示普通文件, d标示目录

    User: rw-
    Group: r--
    Others: r--

    修改文件的权限:
    chmod u+r file1
    chmod g-rw file1
    chmod o=rwx file1
    chmod a=rwx file1 (等于chmod 777 file1, a表示ugo)
    chmod 777 file1
    chmod -R 777 fold1 (递归的设置子文件和子文件夹的权限)

    b. 目录的权限
   目录的读权限: 可以读取目录的内容，也就是ls可以列出目录中所有的文件，但是不能创建的目录或者文件到这个目录中
   目录的写权限: 可以在这个目录中创建新的目录或者文件
   目录的执行权限: 可以搜索目录的内容，但是不能读或者写
   (目录在用哟读写权限之前，必须先用够执行权限)

20. 默认文件的访问权限
<1> umask 显示默认的umask的值
umask
0002

<2> umask XXX 设置默认的umask, 这样新建文件的权限就是777-XXX
文件访问权限= 777 - mask

umask 777 -> 新建文件的权限是: ---------
umask 002 -> 新建文件的权限是: rw-rw-r--
不管屏蔽码是多少, 遵循以下规则:
a. 新创建的文件默认不具有可执行允可权限
b. 新创建的目录默认具有可执行允可权限

21. 特殊访问位:
<1> SUID: 用户ID(与User的x公用一位)
有些Linux命令需要些文件, 而执行这些命令的用户却没有问价的访问权限，例如/etc/passwd
我们普通的用户需要使用passwd来修改密码，但是普通用户却没有修改/etc/passwd文件的权限.

一般来说，命令是根据发出命令的用户的权限来执行的，我们使用SUID可以完成上面passwd的工作,
如果某个命令的可执行文件设置了SUID位, 则该命令执行的时候，就拥有了这个文件所有者的权限,
我们passwd设置了SUID位，那么我们运行的时候就拥有了超级用户的权限，可以修改/etc/passwd了.

chmod 4xxx file-list
chmod u+s  file-list
如果用户已经拥有了执行权限，则执行权限位被设置为s, 否则设置成S.

下面的例子: (rw-rw-r-- -> rwSrw-r--)
ls -l file2
-rw-rw-r-- 1 woomsgadmin woomsgadmin 4 12-21 12:50 file2
chmod u+s file2
ls -l file2
-rwSrw-r-- 1 woomsgadmin woomsgadmin 4 12-21 12:50 file2

<2> SGID: 组ID(与Group的x公用一位)
和SUID类似，使得进程拥有文件的所有者所在的组的权限.

chmod 2xxx file-list
chmod g+s  file-list
如果用户所在的组已经拥有了执行权限，则执行权限位被设置为s, 否则设置成S.

<3> Sticky: 粘着位(与Other的x公用一位)
当对一个目录设置了粘着位的时候，非授权你的用户不能删除或者重命名这个目录的其他用户的文件.
通常对包含多个用户文件的共享目录设置该位.

如果一个程序设置了改位，即使该程序已经结束，系统也会尽量的将该程序的可执行代码保存在内存中，
也就是驻留内存，如果一定要换出，则存放与交换空间(swap space)，也就是如果程序设置了粘着位，程序退出，
要么保存在内存中，要么保存在swap space中，这样做的优点是对于频繁执行的程序，可以迅速的启动.

chmod 1xxx file-list
chmod +t   file-list
如果其它用户已经拥有了执行权限，则执行权限位被设置为t, 否则设置成T.

用户权限的总结: 一共12位
SUID SGID Stick r w x r w x r w x

22. wc file-list 查看文件的信息
<1> wc myfile (返回文件的行数 字数 字符数)

23. diff 比较文件
逐行的比较file1和file2的内容，用一系列命令显示其区别.
<1> diff file1 file2   (其中file1和file2都可以是-, 标示跟标准输入进行比较)
<2> diff -e file1 file2 > ed.script  (为ed编辑器产生脚本, 输入到ed.script中)

<3> diff结合ed一起使用
假设有file1和file2两个文件
$cat file1
this is file1
this is file1-1
this is a test string
this is the end of file
this is the end of file-1
$ cat file2
this is file2
this is a test string
this is a another string
this is the end of file

$diff file1 file2
1,2c1
< this is file1
< this is file1-1
---
> this is file2
3a3
> this is a another string
5d4
< this is the end of file-1
分析:
将file1转换成file2的指令有三种: add(a), change(c), delete(d)
1, 2c1 : 将file1的第一行好第二行转变成file2的第一行
3a3 : 将file2的第三行追加到file1的第三章之后
5d5 : 将file1的第五行删除
<   : 是指第1个文件的行内容
--- : 是分割两个文件
>   : 是第2个文件的行内容

使用ed.script将file1修改成file2
$diff -e file1 file2 > ed.script
$cat ed.script   %% (注意分析ed编辑器的内容)
5d
3a
this is a another string
.
1,2c
this is file2
.
cat >> ed.script   %% 在ed.script末尾增加包含w和q的两行
w
q
<Ctrl - D>
$ed file1 < ed.script  %% file1将通过ed.script修改成和file2一样的内容

补充: ed编辑器的基本使用
ed编辑器是以行为单位对文件进行编辑的
. - 退出编辑文件模式, 进入命令行模式
w - 保存文件
q - 真正的退出ed编辑器


24. uniq 删除重复的行
删除文件中连续重复出现的行，只保留一个副本:
<1> uniq file
<2> uniq -c file 在每个输出的行前显示它出现的次数
<3> uniq -d file 显示重复的行
<4> uniq -u file 显示不重复的行

25. 使用diff和patch给源代码打补丁详解:
diff的三个重要选项: -r, -u, -N
-r选项按照文件目录递归创建修补文件.
-u还是统一模式
-N是指当diff遇到一个只存在于两个树中的一个树中的文件时,默认情况下跳过文件并且打印一个警告到stderr.
这个行为可以通过-N选项来更改,这也导致了diff认为丢失的文件实际上是存在的,但它是空的.采用这种方式,
一个修补文件可以包括已经创建的文件.然后应用修补程序创建新的文件.

<1> 给单个文件制作patch
制作两个文件file1和file2
diff -uN file1 file2 > file1.patch

<2> 给目录制作patch
diff -ruN dir1 dir1_new > dir1.patch

<3> 给目录dir1打patch
diff --dir dir1 < dir1.patch

<4> 恢复目录dir1
diff --dir dir1 -R < dir1.patch

26. Linux下一些常用工具的正则表达式规则:
|        x|y|z        或者, x或者y或者z
.        .com         任意字符, Acom acom
^        ^x           行首, 以x开始的一行
$        D$           行尾, 以D结尾的一行
\        \*           转义, 标示字符*
/        /L..e/       定界符, 标示正则表达式的头或者尾, Love Laae等等
()       (xy)         分组, 匹配xy xyxy xyxyxy
?        xy?          选择, 匹配x或者xy 
*        xy*          重复(0此或者多次), x xy xyy xyyy
+        xy+          重复(1此或者多次), xy xyy xyyy
[]       /[Hh]ello/   取集合中的一个字符, 匹配中括号中的任意字符, Hello hello
[^]      /[^A-KM-Z]/  取集合中的一个字符, 不匹配中括号中的字符, Hello


/^Yes/    以Yes开始的一行
/th/      字符串th出现在单词的任意位置
/:S/      以冒号结尾的一行
/[0-9]/   单个数字

27. gzip和gunzip压缩文件和解压文件:
<1> gzip file         压缩文件file, 压缩后file会被file.gz替换 
<2> gunzip file.gz    解压file.gz, 解压后file.gz会被file替换

$gzip -v file
file:    82.8% -- replaced with file.gz
$gunzip -v file.gz 
file.gz:         82.8% -- replaced with file

28. find 命令进行查找
find directory-list expression
<1> find /home/user/tmp -name file1 在/home/user/tmp目录下查找名为file1的文件

29. grep | egrep | fgrep 用于在文件中进行搜索, 支持正则表达式
grep [options] pattern [file-list]
egrep [options] [string] [file-list]
fgrep [options] [expression] [file-list]

三个命令中fgrep最快, 但使用范围最有限, egrep最慢, 但使用范围最广, 可以用这则表达式
grep速度适中.
<1> grep liqiang file1      看看file1中是否包含liqiang这个单词
<2> grep -n liqiang file*   看看当前目录中以file开头的文件中那个文件包含liqiang(-n 随匹配行打印出行号)

30. Linux的链接
总结:
可以创建硬链接和符号链接两种形式
硬链接一般只针对文件，不针对目录. 和初始文件公用相同的文件索引节点.
符号链接可以针对文件，也可以针对目录，符号链接是一种特殊的文件，建立的时候要建立新的文件索引节点. 读取的时候需要额外开销.

<1> 链接分为硬链接和软连接，软链接又叫符号链接
<2> ln [options] exiting-file new-file   创建一个指向exiting-file的硬链接, 将其命名为new-file
    ln [options] exiting-file-list directory 为file-list中的文件在directory下创建硬链接, 要求directory必须存在.
    这两种硬链接的方式一般针对文件，不针对目录

<3> 为一个文件创建一个硬链接
为file1创建硬链接file1.hard, 注意观察inode的价值, file1和file1.hard具有相同的索引节点号
和file1的链接数的变化: inode从1变为2, 也就是当创建一个文件的硬链接的时候，链接数加1.
当删除一个具有多个硬链接的文件的时候，链接数减1. 也就是虽然file1被删除了，但是其内容仍然保存在磁盘中.
因为file1的索引节点并没有被删除，file1.hard仍然指向这个索引节点.
如果链接数为0，则系统删除该文件.
(补充: mv移动文件后，硬链接仍然可以访问)

$ ls -il file1
526085 -rw-rw-r-- 1 woomsgadmin woomsgadmin 20 12-21 16:13 file1
$ ln file1 file1.hard      %% 创建硬链接
$ ls -il file1 file1.hard 
526085 -rw-rw-r-- 2 woomsgadmin woomsgadmin 20 12-21 16:13 file1
526085 -rw-rw-r-- 2 woomsgadmin woomsgadmin 20 12-21 16:13 file1.hard
$ rm file1                 %% 删除一个文件
$ ls -il file1.hard 
526085 -rw-rw-r-- 1 woomsgadmin woomsgadmin 20 12-21 16:13 file1.hard

<4> 为一个目录下的所有文件创建硬链接
在dir1下创建三个文件fil1,file2,file3
为dir1目录下的所有文件在dir2下创建硬链接，文件名相同, 
要求dir2必须存在，并且具有可执行和写的权限
创建硬链接之后, dir1下的所有文件链接数都变成2
简单来说: 初始文件和硬链接文件的所有内容都相同，就是同一个文件.

$ ls -il dir1
526089 -rw-rw-r-- 1 woomsgadmin woomsgadmin 22 12-21 16:17 file1
526092 -rw-rw-r-- 1 woomsgadmin woomsgadmin 22 12-21 16:17 file2
526093 -rw-rw-r-- 1 woomsgadmin woomsgadmin 22 12-21 16:17 file3
$ ln dir1/* dir2   %% 
$ ls -il dir1
526089 -rw-rw-r-- 2 woomsgadmin woomsgadmin 22 12-21 16:17 file1
526092 -rw-rw-r-- 2 woomsgadmin woomsgadmin 22 12-21 16:17 file2
526093 -rw-rw-r-- 2 woomsgadmin woomsgadmin 22 12-21 16:17 file3
$ ls -il dir2
526089 -rw-rw-r-- 2 woomsgadmin woomsgadmin 22 12-21 16:17 file1
526092 -rw-rw-r-- 2 woomsgadmin woomsgadmin 22 12-21 16:17 file2
526093 -rw-rw-r-- 2 woomsgadmin woomsgadmin 22 12-21 16:17 file3

<5> 为一个文件创建软连接，也就是符号链接, 观察其与硬链接的区别:
(ln 参数多了一个-s)
$ ls -il file1
526085 -rw-rw-r-- 1 woomsgadmin woomsgadmin 8 12-21 16:24 file1
$ ln -s file1 file1.soft    %% 创建符号链接
$ ls -il file1 file1.soft 
526085 -rw-rw-r-- 1 woomsgadmin woomsgadmin 8 12-21 16:24 file1
526087 lrwxrwxrwx 1 woomsgadmin woomsgadmin 5 12-21 16:24 file1.soft -> file1

区别:
初始文件和链接文件的索引节点号不同, 这意味着它们是不同的文件
初始文件时普通文件, 用-标示，链接文件用l标示.
两个文件的链接数都是1，也说明它们是不同的文件
文件大小不同
链接文件后面是 file1.soft -> file1   (file1有5个字符，所以链接文件的大小是5)

软连接文件的读取过程:
实质上软连接文件中file1.soft存放时的是初始文件的路径，系统在读取的时候首先会打开file1.soft
读取其内容，从而获取file1的名字，然后在读取file1的内容.
这会导致文件操作变慢，实质上用符号链接读取文件，需要一次额外的读盘操作.

我们可以编辑符号链接所指向的文件，但是必须保持初始文件的路径不变，否则读取失效.
硬链接不存在这个文件，在硬链接的情况下即使用mv移动了初始文件，访问仍然正常.

<6> 为一个目录创建一个符号链接
ln -s pic2 pic2.soft 如果pic2是一个目录，则会为这个目录创建一个符号链接

<7> 目录的索引节点个数
补充一点, 目录的连接数至少2, 原因是每个目录中都有一个., 硬链接到它自己, 如果目录下多几个子目录,
每个子目录的..也硬链接到这个目录. 所以目录的硬链接数一定大于等于2.
所以可以这么说, 硬链接数是一个文件或者目录的真实名字的个数.

31. 重定向和管道
a. 输入和输出重定向
Linux内核会自动为每条命令打开三个文件，stdin, stdout, stderr. 默认的情况下键盘是标准输入, 控制台终端是标准输出.
流程是: (键盘)stdin -> command -> (显示屏)stdout | (显示屏)stderr
##输入重定向
command < input file
流程是: (input file)stdin -> command -> (显示屏)stdout | (显示屏)stderr
##输出重定向
command > output file
流程是: (键盘)stdin -> command -> (output file)stdout | (显示屏)stderr
##合并输入输出重定向
command < input file > output file
command > output file < input file
流程是: (input file)stdin -> command -> (output file)stdout | (显示屏)stderr
##标准错误重定向
command 2> output errorlog
流程是: (键盘)stdin -> command -> (显示屏)stdout | (output errorlog)stderr
##在一条命令中重定向标准输出和标准错误
command 1> command.output 2> command.errors
或者(标准输出和标准错误都重定向到一个文件中)
command 1> command.output.error 2>&1
command 1> command.output.error 1>&2
##在一条命令中重定向标准输入，标准输出和标准错误
command 0< input file 1> command.output 2> command.errors
##追加操作(使用>>替换上面的>)
command >> output file

分析:
输入重定向
cat < tmpfile
cat tmpfile
上面两个虽然都是把tmpfile的内容显示在屏幕上，但是逻辑不同，第一个是cat的输入重定向，
第二个是cat的参数.
类似的:
grep liqiang file1
grep liqiang < file1
第一个file1是grep的参数, 第二个是grep的输入重定向.

输出重定向
grep -n liqiang file1 > liqiang.file1

合并输入输出重定向
cat < file1 > file1.backup

标准错误重定向(如果file5不存在, 则错误信息输入到error.log)
(一般情况下，我们把标准错误信息链接在显示屏，方便及时的得到错误信息)
ls -il file5 2> error.log

b. 管道
Linux允许一个命令的标准输出作为另外一个命令的标准输入
command1 | command2 | command3 | ... | commandN
其中command1的标准输出是command2的标准输入，以此类推.

我们通常把这些通过管道连接起来的命令称为filter, 它们从标准输入取得数据，经过一些列处理，输出到标准输出，
管道和过滤器用于单个命令无法完成的复杂任务.

管道允许两条linux命令(进程)相互通讯，所以管道又被看成时一种进程间通讯的方式

一个例子:
ls -l | more -5 %% 将当前文件夹的内容显示出来，每屏幕显示5行
可以用下面的命令替换，但是会慢很多
ls -l > tmp.file
more -5 < tmp.file (或者more -5 tmp.file)
rm tmp.file

c.  重定向和管道的组合
用户无法单独使用重定向或者管道实现: 将某个命令的标准输出重定向到一个文件，同时还将该输出作为另外一个命令
的标准输入.
我们可以使用tee来完成这个需求

command1 | tee file1 file2 ... fileN | command2
先执行command1 将结果保存在file1...fileN中，然后再发送给command2作为其标准输入.

例如:
cat file1 | grep liqiang | tee liqiang.file1 | wc -l

总结: Bourne shell的重定向操作
>file       输出重定向
<file        输入重定向
>>file       追加标准输出
0<file       输入重定向
1>fiel       输出重定向
2>file       错误重定向
1>>file1     将标准输出追加到file
2>>file1     将标准错误追加到file
<&m          将标准输入连接到描述符为m的文件中
>&m          将标准输出连接到描述符为m的文件中
m>&n         将文件描述符m和n连接
cmd1 | cmd2  命令cmd1的标准输出时cmd2的标准输入


32. Linux进程的简单介绍
a. Linux进程的状态
一个Linux进程通常来说，包含5种状态:
就绪: 进程准备运行，但没有得到CPU
运行: 进程正在运行，占用CPU
等待: 等待某个事件的发生
被交换: 暂时保存在交换空间
僵死: 垂死的进程，通常一个进程的父进程在该进程调用exit系统调用前就终止时候，该进程就是僵死进程.

fork系统调用:
fork是linux的系统调用，用来创建子进程（child process）。子进程是父进程(parent process)的一个副本，
从父进程那里获得一定的资源分配以及继承父进程的环境。子进程与父进程唯一不同的地方在于pid（process id）

Shell为每一次命令创建一个新的进程，当命令进程运行时，Shell等待，直到该命令结束.

b. 执行二进制的外部命令的流程(通过exec来执行)
Shell命令分为"内部命令"和"外部命令(二进制或者是shell脚本)"两种.
(sh)父进程  fork-> (sh)子进程
(sh)父进程      -> (exec sort)子进程

c. 执行Shell脚本的流程(会创建一个子Shell来执行, 也即是父shell的副本来执行):
(sh)父进程  fork-> (sh)子进程
(sh)父进程      -> (sh)子进程  fork-> (sh)子进程
(sh)父进程      -> (sh)子进程      -> (exec find)子进程

d. exec命令"运行另一个程序来替代当前shell"
我们启动一个sh: /bin/sh
再启动一个bash: /bin/bash
然后在bash中执行exec more file1, 这条命令会使exec more来替换当前的bash shell, 也就是bash
当这条命令执行后, 我们会回到sh.
这个过程也就是Shell执行外部二进制命令的原理.

e. 如何在shell脚本中指定特定的shell执行?
在shell脚本的开头:
#! /bin/sh
或者
#! /bin/bash

f. Linux中系统的调度算法(优先级值越大，优先级越低): 
优先级值  = 优先级阀值 + Nice值 + (最近的CPU使用率/2)
系统用上面的公式为每个进程计算一个优先级值，每秒都会重新计算一次，当进程调度的时候，具有"最小优先级"值
的进程会获得CPU, 当多个进程遇有相同优先级值的时候，使用先来先服务的原则.

优先级阀值: 是一个整数，通常是40或60
Nice值: 是一个默认值为20的整数，可以修改
最近的CPU使用率: CPU使用率会不断更新, CPU的使用率越高，说明这个进程最近占用了越多的CPU时间.

g. 使用ps命令报告进程状态
ps -a 显示在当前终端上除了登录shell外之外的所有进程信息
ps -e 显示所有运行在系统中的进程信息
ps -l 显示进程的详细状态列表
ps -u uidlist 使用逗号分隔uid.

可以用下面的公式来计算进程的优先级值(PRI), 值越大，优先级越低.
PRI = 优先级阀值 + NI + (C/2)

h. 使用top命令
使用top实时的监视CPU和内存的活动，每5秒钟刷新一次.
使用<Ctrl - C>退出

i. 前台进程和后台进程的相关命令
command    前台进程
command &  后台进程
<CTRL - Z> 将一个正在前台执行的命令放到后台, 并且暂停(Stopped).
jobs       查看当前有多少命令被放在后台执行.
fg         将一个后台暂停的命令在前台执行, 如果fg不带参数, 则将当前作业切换到前台;
	   也可以代参数, 执行jobid, fg jobid
bg         将一个后台暂停(Stopped)的命令变成在后台继续执行(通常配合<CTRL - Z>使用).
	   如果有多个后台命令, 可以使用bg jobid.

格式: 返回的是Job的 -> [JobID] + PID
$ find /home/ -name liqiang -print > data.log &
[1] 11639

要终止一个前台进程，<Ctrl - C>就可以了；
要终止后台进程，可以使用kill命令(kill pid); 或者使用fg将其转换到前台，然后<Ctrl - C>

j. Linux守护进程
任何后台运行的进程都可以成为守护进程，但作为一个术语，通常指在后台运行的系统进程.

k. 命令的顺序执行
cmd1; cmd2; cmd3; cmd4

l. 命令的并行执行(每个命令都作为一个单独的进程执行)
cmd1& cmd2& cmd3& cmd4&

m. 命令的分组
(cmd1; cmd2; cmd3; cmd4)

n. init进程
只要系统运行，最先运行的是/etc/init, 这个进程的PID是1，是所有进程的祖先.

33. 文件系统的备份
四个命令:
<1> tar -czvf dir.tar.gz dir  (压缩)
<2> tar -xzvf dir.tar.gz      (解压)
<3> tar -cvf  dir.tar dir     (压缩)
<4> tar -xvf  dir.tar         (解压)

34. 使用gcc和make来编译c语言的程序
<1> 编译一个简单的c程序test.c
test.c
#include<stdio.h>
int main() {
  printf("this is a test string\n");
  return 0;
}

$ gcc test.c   %% 可执行代码最终存储在a.out中
$ ls
a.out  test.c

$ gcc -c test.c %% 只生成目标文件(test.o), 扩展名是o, 不进行链接
$ ls
test.c  test.o

$ gcc -o test.exe test.c  %% -o参数可以指定生成的可执行文件的名字(test.exe), 而不是默认的a.out
$ ls
test.c  test.exe

补充一个问题:
直接在shell中输入test.exe是不能运行的，提示:
test.exe: command not found
这是因为没有将当前路径添加到shell的搜索路径中, 解决方式是
./test.exe 运行
或者是将当前路径加入到shell的搜索路径中
$ PATH=$PATH:.   
$ export PATH
$ test.exe 
this is a test string

shell与export命令
用户登录到Linux系统后，系统将启动一个用户shell。在这个shell中，可以使用shell命令或声明变量，
也可以创建并运行shell脚本程序。运行shell脚本程序时，系统将创建一个子shell。此时，系统中将有两个shell，
一个是登录时系统启动的shell，另一个是系统为运行脚本程序创建的shell。当一个脚本程序运行完毕，
它的脚本shell将终止，可以返回到执行该脚本之前的shell。
在子 shell中定义的变量只在该子shell内有效。如果在一个shell脚本程序中定义了一个变量，当该脚本程序运行时，
这个定义的变量只是该脚本程序内的一个局部变量，其他的shell不能引用它，要使某个变量的值可以在其他shell中被改变，
可以使用export命令对已定义的变量进行输出。 export命令将使系统在创建每一个新的shell时定义这个变量的一个拷贝。
这个过程称之为变量输出.

<2> 编译一个简单的c程序，依赖math库:
test.c
#include<stdio.h>
#include<math.h>

int main() {
  printf("3 ^ 4 = %f\n", pow((double)3, (double)4));
  return 0;
}

gcc -lm test.c -o test.exe   (使用-llib来链接到指定的库)

<3> 对上面的例子使用makefile来编译
Makefile
test.exe : test.c
        gcc -lm test.c -o test.exe

<4> 建立库中的目标文件
ar r mathlib.a input.o compute.o  创建新的归档文件
ar q mathlib.a compute.o          向已经存在的归档文件中添加新文件
ar t mathlib.a                    显示一个归档文件的列表
ar d mathlib.a compute.o          删除一个归档文件中的文件
ar x mathlib.a compute.o          提取一个归档文件中的文件

















    
    





















