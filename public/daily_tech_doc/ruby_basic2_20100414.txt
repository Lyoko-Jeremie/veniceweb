
1. 元编程和反射:
简单说, 能够修改可执行应用程序数据的能力就叫做元编程.
元编程是指某类[计算机程序]的编写, 这类计算机程序编写或者操纵其他程序(或者自身)作为它们的数据,
或者在[运行时]完成部分本应在[编译时]完成的工作.
很多情况下比手工编写全部代码相比工作效率更高, 编写元程序的语言称之为元语言, 被操作的语言称之
为目标语言.

一门语言同时也是自身的元语言的能力称之为"反射".

下面的例子可以认为是最基本的元编程的例子:
例子1:
str = 'hello world'
puts "#{str}"  
puts "#{2*12}"

例子2:
def x(s)
  puts s.upcase
end
(1..3).each{|i| x("hello-" + i.to_s)}

2. eval方法
<1> ruby的eval方法提供了"在字符串中执行ruby表达式"的能力,
    初看起来和#{}插入ruby表达式的方式类似
    puts "#{1 + 2}"  # 输出3
    puts eval("1+2") # 输出3
<2> 但有时候eval和#{}结果会不同
    exp = gets().chomp() # 我们输入3*4
    puts eval(exp) # 返回12
    puts "#{exp}"  # 返回3*4
    原因是:
    gets()方法返回的是一个字符串, #{}当作一个"字符串"处理, 而不是一个表达式.
    但是eval当作一个表达式处理.
    另外一个例子:
    exp = "'hello world'.upcase"
    puts eval(exp) # 输出 HELLO WORLD
    puts "#{exp}"  # 输出 'hello world'.upcase

3.



